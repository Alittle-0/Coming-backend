#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
var app = require("../../app");
var debug = require("debug")("coming:server");
var http = require("http");
const { Server } = require("socket.io");
const messageController = require("../app/controllers/MessageController.js"); // Add this

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Initialize Socket.IO
 */
const io = new Server(server, {
  cors: {
    origin: [
      "https://app-react-drab.vercel.app",
      "http://localhost:3000",
      "https://coming-server.vercel.app",
      "https://coming-tau.vercel.app",
      "http://localhost:5173",
    ],
    credentials: true,
    methods: ["GET", "POST"],
  },
});

// Socket.IO connection handling
io.on("connection", (socket) => {
  console.log("User connected:", socket.id);

  // Join a channel room
  socket.on("join-channel", (channelId) => {
    socket.join(channelId);
    console.log(`User ${socket.id} joined channel: ${channelId}`);
  });

  // Leave a channel room
  socket.on("leave-channel", (channelId) => {
    socket.leave(channelId);
    console.log(`User ${socket.id} left channel: ${channelId}`);
  });

  // Handle sending messages
  socket.on("send-message", async (data) => {
    try {
      const { channelId, message, user } = data;

      // Create message object
      const messageData = {
        id: Date.now(), // Temporary ID for real-time display
        channelId,
        message,
        user,
        timestamp: new Date(),
      };

      // Broadcast message to all users in the channel first (for real-time display)
      io.to(channelId).emit("new-message", messageData);

      // Save message to database
      const savedMessage = await messageController.saveMessage(messageData);

      // Optionally, emit the saved message with the actual database ID
      io.to(channelId).emit("message-saved", {
        tempId: messageData.id,
        savedMessage: savedMessage,
      });

      console.log(`Message saved to database: ${savedMessage._id}`);
    } catch (error) {
      console.error("Error saving message:", error);

      // Emit error to the sender
      socket.emit("message-error", {
        error: "Failed to save message",
        originalMessage: data,
      });
    }
  });

  // Handle typing indicators
  socket.on("typing", (data) => {
    socket.to(data.channelId).emit("user-typing", {
      userId: data.userId,
      username: data.username,
    });
  });

  socket.on("stop-typing", (data) => {
    socket.to(data.channelId).emit("user-stop-typing", {
      userId: data.userId,
    });
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
  });

  //Handle remove message
  socket.on("delete-message", async (data) => {
    try {
      const { messageId, userId, channelId } = data;

      // First verify the user has permission to delete (similar to your controller logic)
      const Message = require("../app/models/Message");
      const message = await Message.findById(messageId);

      if (!message) {
        socket.emit("delete-error", {
          error: "Message not found",
          messageId,
        });
        return;
      }

      // Check if user owns the message (or is admin)
      if (message.user.id !== userId) {
        socket.emit("delete-error", {
          error: "Not authorized to delete this message",
          messageId,
        });
        return;
      }

      // Delete from database
      await Message.findByIdAndDelete(messageId);

      // Broadcast to all users in the channel that the message was deleted
      io.to(channelId).emit("message-deleted", {
        messageId,
        channelId,
        deletedBy: userId,
      });

      console.log(`Message ${messageId} deleted by user ${userId}`);
    } catch (error) {
      console.error("Error deleting message:", error);
      socket.emit("delete-error", {
        error: "Failed to delete message",
        messageId: data.messageId,
      });
    }
  });
});

// Make io available to routes
app.set("socketio", io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Server: http://localhost:${port}`);
  console.log("Running successfully");
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
